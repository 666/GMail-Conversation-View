<!DOCTYPE html [
  <!ENTITY % pageDTD SYSTEM "chrome://conversations/locale/pages.dtd"> %pageDTD;
]>
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
  <title>First run assistant</title>
  <link rel="stylesheet" type="text/css" href="chrome://conversations/skin/assistant.css" />
  <script type="text/javascript" src="chrome://conversations/content/js/jquery-1.5.js"></script>
  <script type="application/javascript;version=1.8">
    <![CDATA[

    const Ci = Components.interfaces;
    const Cc = Components.classes;
    const Cu = Components.utils;
    const Cr = Components.results;

    Cu.import("resource://conversations/config.js");
    Cu.import("resource://conversations/prefs.js");
    Cu.import("resource://conversations/log.js");
    Cu.import("resource://conversations/assistant.js");

    let Log = setupLogging("Conversations.AssistantUI");
    let uninstallInfos = JSON.parse(Prefs.getString("conversations.uninstall_infos"));

    function install(aKey) {
      if (!(aKey in Customizations)) {
        Log.warn("Couldn't find a suitable customization for", aKey);
      } else {
        try {
          let uninstallInfo = Customizations[aKey].install();
          uninstallInfos[aKey] = uninstallInfo;
        } catch (e) {
          Log.error("Error in customization", aKey);
          Log.error(e);
          dumpCallStack(e);
        }
      }
    }

    // In all cases, closing the window once should prevent it from ever opening
    //  again.
    function upgrade() {
      Prefs.setInt("conversations.version", conversationsCurrentVersion);
    }
    window.addEventListener("unload", upgrade, true);

    let finishedAlready = false;
    function finish() {
      // The user closed the window, so we ran finish() already, and now we're
      //  running it again because indexed just finished. Abort abort abort.
      if (finishedAlready)
        return;

      let str = JSON.stringify(uninstallInfos);
      Log.debug("Saving JSON uninstall information", str);
      Prefs.setString("conversations.uninstall_infos", str);
      finishedAlready = true;
      upgrade();
      window.removeEventListener("unload", finish, true);
      window.close();
    }

    // This is the usual API: if you launch something asynchronous, just do
    // expect () and call top () when you're done.
    let expected = 1;
    function top() {
      if (--expected == 0)
        finish();
    }
    Customizations.expect = function () expected++;
    Customizations.top = top;

    // --- UI event handlers

    function onFinish() {
      // Register uninstall information if the user closes the window now.
      window.addEventListener("unload", finish, true);

      $(".working").show();
      $(".applyChanges").attr("disabled", "disabled").text($(".working:first").text());

      let checkboxes = document.querySelectorAll("input[type=\"checkbox\"]");
      for each (let [, checkbox] in Iterator(checkboxes)) {
        if (checkbox.checked)
          install(checkbox.id);
        else
          Log.debug("User declined", checkbox.id);
      }
      top();
    }

    function onCustomSetup(event) {
      $(".more").fadeIn("slow");
      $(".more").get(0).scrollIntoView();
      $(event.target).hide();
    }

    ]]>
  </script>
</head>

<body>
  <div id="wrapper">
    <div class="main">
      <h1 class="title">Thunderbird <span class="orange">Conversations</span> 2.0</h1>
      <div class="text">
        <p>
          &assistant.intro;
        </p>
        <p class="p1">
          &assistant.p1;
        </p>
        <p class="p2">
          &assistant.p2;
        </p>
        <p class="p3">
         <span class="orange">&assistant.p3;</span>
        </p>
        <p class="working" style="text-align: left; margin-top: 50px">
          &assistant.working;  <img src="loader.gif" />
        </p>
      </div>
    </div>

    <div class="buttonBox">
      <button onclick="onCustomSetup(event);">&assistant.review;</button>
      <button onclick="onFinish(event);" class="applyChanges">&assistant.apply;</button>
    </div>

    <div class="more">
      <p>
        &assistant.settings;
      </p>
      <ul>
        <li>
          <input type="checkbox" disabled="disabled" checked="checked" id="actionEnableGloda" />
          &assistant.actionEnableGloda;
        </li>
        <li>
          <input type="checkbox" disabled="disabled" checked="checked" id="actionDisableAutoread" />
          &assistant.actionDisableAutoread;
        </li>
        <li>
          <input type="checkbox" disabled="disabled" checked="checked" id="actionReindexAttachments" />
          &assistant.actionReindexAttachments;
        </li>
        <li>
          <input type="checkbox" disabled="disabled" checked="checked" id="actionDontExpand" />
          &assistant.actionDontExpand;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionAttachmentsInline" />
          &assistant.actionAttachmentsInline;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionOfflineDownload" />
          &assistant.actionOfflineDownload;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionUnifiedInboxSearchesSent" />
          &assistant.actionUnifiedInboxSearchesSent;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionSetupView" />
          &assistant.actionSetupView;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionSetupViewDefaults" />
          &assistant.actionSetupViewDefaults;
        </li>
        <li>
          <input type="checkbox" checked="checked" id="actionEnsureMessagePaneVisible" />
          &assistant.actionEnsureMessagePaneVisible;
        </li>
      </ul>

      <p>
        &assistant.settings2;
      </p>

      <p class="working">
        &assistant.working;  <img src="loader.gif" />
      </p>

      <div id="footer">
      </div>
    </div>

  </div>
</body>

</html>
