<!DOCTYPE html [
  <!ENTITY % pageDTD SYSTEM "chrome://conversations/locale/pages.dtd"> %pageDTD;
]>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>Conversation Reader</title>
  <link rel="stylesheet" type="text/css" href="chrome://messenger/skin/tagColors.css"/>
  <link rel="stylesheet" type="text/css" href="chrome://conversations/skin/boxflex.css" />
  <!-- Keep the order! -->
  <link rel="stylesheet" type="text/css" href="chrome://conversations/skin/conversation.css" />
  <link rel="stylesheet" type="text/css" href="chrome://conversations/skin/tokeninput.css" />
  <link rel="stylesheet" type="text/css" media="print" href="chrome://conversations/skin/print.css" />
  <script type="text/javascript" src="chrome://conversations/content/js/jquery-1.5.js"></script>
  <script type="text/javascript" src="chrome://conversations/content/js/jquery.text-overflow.js"></script>
  <script type="text/javascript" src="chrome://conversations/content/js/jquery.tmpl.js"></script>
  <script type="text/javascript" src="chrome://conversations/content/js/jquery.tokeninput.js"></script>
  <!-- The two scripts below share the same scope, they were split for the sake
    of readability. -->
  <script type="application/javascript;version=1.8"
    src="chrome://conversations/content/stub.compose-ui.js"></script>
  <script type="application/javascript;version=1.8"
    src="chrome://conversations/content/stub.completion-ui.js"></script>
  <script type="application/javascript;version=1.8"><![CDATA[
    // Below are mostly UI utility functions.
    (function ($) {
      $.fn.vAlign = function(container) {
        $(document).ready(function () {
          if (!container)
            container = "div";

          this.each(function(i) {
            $(this).wrap("<div />");
            var el = $(this);
            var elh = el.height(); //new element height
            var ph = el.parent().height(); //parent height
            var nh = (ph - elh) / 2; //new margin to apply
            if (!nh) {
              $(this).unwrap();
            } else {
              el.css('margin-top', nh);
              // don't align again now we've succeeded
              el.removeClass("align");
            }
          });
        }.bind(this));
      };
    })(jQuery);

    function clearMenu() {
      let menus = document.getElementsByClassName("replyDropMenu");
      for each (let [, menu] in Iterator(menus))
        menu.style.display = "none";
    }

    function displayMenu(event) {
      let menu = event.target.nextElementSibling;
      let menuWasVisible = menu.style.display == "-moz-box";
      clearMenu();
      if (!menuWasVisible) {
        menu.style.display = "-moz-box";
        event.stopPropagation();
      }
    }

    $(document).ready(function () {
      document.addEventListener("click", function (event) {
        clearMenu();
      }, false);
    });

    function alignAttachments(aMsgNode) {
      Log.debug("Aligning attachments...");
      $(aMsgNode._domNode).find(".align").vAlign();
    }

    function scrollNodeIntoView (aNode) {
      let offset = aNode.offsetTop || 0;
      let parent = aNode.parentNode;
      while (parent && !(parent instanceof HTMLDocument)) {
        let style = window.getComputedStyle(parent, null);
        if (style.position == "relative")
          offset += parent.offsetTop;
        parent = parent.parentNode;
      }
      // The header is 44px high (yes, this is harcodeadly ugly).
      window.scrollTo(0, offset + 5 - 44);
    }

    function toggleQuote(event, showquotedtext, hidequotedtext) {
      let link = event.target;
      let div = link.nextSibling;
      let cs = window.getComputedStyle(div, null);
      if (div.style.display == "none") {
        link.textContent = "- "+hidequotedtext+" -";
        div.style.display = "";
        let h = div.getBoundingClientRect().height +
          parseFloat(cs.marginTop) + parseFloat(cs.marginBottom);
        return h;
      } else {
        let h = div.getBoundingClientRect().height;
        h += parseFloat(cs.marginTop);
        h += parseFloat(cs.marginBottom);
        link.textContent = "- "+showquotedtext+" -";
        div.style.display = "none";
        return -h;
      }
    }

    const kPopupTimeout = 500;

    function enableTooltips(aMsg) {
      let $aMsgNode = $(aMsg._domNode);
      $aMsgNode.find('.tooltip').each(function (i) {
        // "details" is a hypothetical "details" link that, when
        //   hovered/clicked, starts the interaction with the tooltip
        let $tooltip = $(this);
        let $details = $tooltip.prev();

        let sticky = false;
        let timeout;
        /* $details.get(0).addEventListener("click", function (event) {
          sticky = !sticky;
          event.stopPropagation();
        }, false); */
        $details.hover(
          function() {
            if (aMsg.collapsed)
              return;
            if (!sticky) {
              clearTimeout(timeout);
              let self = this;
              timeout = setTimeout(function () {
                $(self).next(':hidden').fadeIn();
              }, kPopupTimeout);
            }
          },
          function() {
            var self = this;
            if (!sticky) {
              clearTimeout(timeout);
              timeout = setTimeout(function () {
                $(self).next(/*':visible'*/).fadeOut()
              }, kPopupTimeout);
            }
          });
        $tooltip.hover(
          function () {
            clearTimeout(timeout);
          },
          function () {
            var self = this;
            if ($(this).is(":visible") && !sticky) {
              clearTimeout(timeout);
              timeout = setTimeout(function () {
                $(self).fadeOut();
              }, kPopupTimeout);
            }
          });
      });
    }

    // Setting the second parameter to false means don't fire a stupid timer
    //  that lives forever everytime we call this function.
    function fakeTextOverflowSubject() {
      $(".subject").textOverflow(null, false);
    }

    function cleanup() {
      // These shouldn't be necessary because we're blasting away everything by
      //  setting .innerHTML BUT jQuery won't remove its persistent event
      //  listeners if we don't do that which will in turn cause memory leaks!
      // Indeed, the listeners are actually closures on Message instances. These
      //  contain a pointer to their parent Conversation, so that would prevent
      //  the GC from collecting anything! Argh!
      $("#messageList").empty();
    }

    function openLink(event) {
      gMessenger.launchExternalURL(event.originalTarget.getAttribute("href"));
    }

    document.addEventListener("focus", function (event) {
      /* This is a persistent event listener. It can operate multiple
       * times. We have the invariant that for a given conversation, there's at
       * most one such element (recycling doesn't use tabindex 1). */
      let msgNode = document.querySelector(".message[tabindex=\"1\"]");
      if (!msgNode)
        return;

      /* Restore the proper tab order. This event is fired *after* the
       * right message has been focused in Gecko 1.9.2, *before* the right
       * message has been focused in Gecko 1.9.1 (so it's basically
       * useless). */
      let msgNodes = document.getElementsByClassName("message");
      let index;
      for each (let [i, k] in Iterator(msgNodes)) {
        if (k == msgNode) {
          index = i;
          break;
        }
      }
      if (index)
        msgNode.setAttribute("tabindex", index+2);
    }, true);

    // Below are event listeners for various actions. There is some logic
    //  involved, and they may talk to other parts of the code.

    // This property is now set from the outside. This allows stub.html to
    //  be used either in a standalone tab or in the multimessage pane.
    // let Conversations = window.top.Conversations;

    Components.utils.import("resource://conversations/stdlib/misc.js");
    Components.utils.import("resource://conversations/stdlib/msgHdrUtils.js");
    Components.utils.import("resource://conversations/prefs.js");
    Components.utils.import("resource://conversations/log.js");

    let Log = setupLogging("Conversations.Stub");

    // Mark the current conversation as read/unread. The conversation driver
    //  takes care of setting the right class on us whenever the state
    //  changes...
    function toggleRead(event) {
      let $span = $(event.target).find("span.read");
      if ($span.hasClass("unread")) {
        Conversations.currentConversation.read = true;
        $span.removeClass("unread");
      } else {
        Conversations.currentConversation.read = false;
        $span.addClass("unread");
      }
    }

    function expandCollapse(event) {
      let $span = $(event.target).find("span.expand");
      if ($span.hasClass("collapse")) {
        [message.collapse()
          for each ([, { message }] in Iterator(Conversations.currentConversation.messages))];
        $span.removeClass("collapse");
      } else {
        [message.expand()
          for each ([, { message }] in Iterator(Conversations.currentConversation.messages))];
        $span.addClass("collapse");
      }
    }

    function archiveConversation(event) {
      msgHdrsArchive(Conversations.currentConversation.msgHdrs);
    }

    function deleteConversation(event) {
      msgHdrsDelete(Conversations.currentConversation.msgHdrs);
    }

    function junkConversation(event) {
      // This callback is only activated when the conversation is not a
      //  conversation in a tab AND there's only one message in the conversation,
      //  i.e. the currently selected message
      topMail3Pane(window).JunkSelectedMessages(true);
      $("#conversationHeader").addClass("not-junkable");
    }

    const kGalleryUrl = "chrome://conversations/content/gallery/index.html";

    function galleryView(uri) {
      let tabmail = topMail3Pane(window).document.getElementById("tabmail");
      tabmail.openTab("chromeTab", {
        chromePage: kGalleryUrl+"?uri="+uri,
      });
    }

    /**
     * This function gathers various information, encodes it in a URL query
     * string, and then opens a regular chrome tab that contains our
     * conversation.
     */
    function detachTab(event) {
      let tabmail = topMail3Pane(window).document.getElementById("tabmail");
      let willExpand = $("textarea").parent().hasClass("expand") && startedEditing();
      // Pick _initialSet and not msgHdrs so as to enforce the invariant
      //  that the messages from _initialSet are in the current view.
      let urls = [
        msgHdrGetUri(x)
        for each (x in Conversations.currentConversation._initialSet)
      ].join(",");
      let queryString = "?urls="+encodeURIComponent(urls)
        +"&willExpand="+Number(willExpand);
      // First, save the draft, and once it's saved, then move on to opening the
      // conversation in a new tab...
      onSave(null, false, function () {
        tabmail.openTab("chromeTab", {
          chromePage: kStubUrl+queryString,
        });
      });
    }

    /**
     * That big event handler tries to parse URL query parameters, and then acts
     * upon these, by firing a conversation on its own. This is a very
     * stripped-down version of the logic that's in monkeypatch.js, and it
     * serves the purpose of being able to create a standalone conversation view
     * in a new tab.
     */
    $(document).ready(function () {
      // I just imagined Javascript would have some function for that
      // built-in... looks like even jQuery doesn't have it.
      let params = decodeUrlParameters(document.location.href);

      // Oh, are we expected to build a conversation on our own? Let's do it,
      // yay!
      if ("urls" in params) {
        try {
          window.frameElement.setAttribute("tooltip", "aHTMLTooltip");
          let mainWindow = topMail3Pane(window);
          let willExpand = parseInt(params.willExpand);
          let msgHdrs = [msgUriToMsgHdr(x) for each (x in params.urls.split(","))];
          msgHdrs = msgHdrs.filter(function (x) x != null);
          msgHdrs = msgHdrs.filter(function (x) x.messageId);
          // It might happen that there are no messages left...
          if (!msgHdrs.length) {
            document.getElementById("messageList").textContent =
              strings.get("messageMovedOrDeletedConversation");
          } else {
            msgHdrsMarkAsRead(msgHdrs, true);
            window.Conversations = {
              currentConversation: null,
              counter: 0,
            };
            let freshConversation = new mainWindow.Conversations.monkeyPatch._Conversation(
              window,
              msgHdrs,
              Prefs.kScrollUnreadOrLast,
              ++Conversations.counter
            );
            let browser = window.frameElement;
            // Because Thunderbird still hasn't fixed that...
            browser.setAttribute("context", "mailContext");
            freshConversation.outputInto(browser, function (aConversation) {
              // This is a stripped-down version of what's in monkeypatch.js,
              //  make sure the two are in sync!
              Conversations.currentConversation = aConversation;
              aConversation.completed = true;
              registerQuickReply();
              // That's why we saved it before...
              loadDraft();
              if (willExpand)
                $("textarea").parent().addClass('expand');
              document.getElementById("conversationHeader").classList.add("not-junkable");
            });
          }
        } catch (e) {
          Log.debug(e);
          dumpCallStack(e);
        }
      }
    });

    // I'll never understand why JS doesn't have lexical scoping...
    let tStrings = new StringBundle("chrome://conversations/locale/template.properties");
    let str = function (x) {
      try {
        return tStrings.get(x);
      } catch (e) {
        Log.error("No such string", x);
        Log.debug(e);
        dumpCallStack(e);
      }
    };
  ]]>
  </script>
</head>

<body>
  <script id="messageTemplate" type="text/x-jquery-tmpl"><![CDATA[
    <li class="message collapsed">
      <div class="messageHeader hbox">
        <div class="star"></div>
        <div class="author">{{tmpl(dataContactFrom) "#contactTemplate"}}</div>
        <div class="involved boxFlex">
          <span class="to">${str("to")} {{tmpl(dataContactsTo) "#contactTemplate"}}</span>
          <span class="snippet"><ul class="tags regular-tags"></ul>${snippet}</span>
        </div>
        <div class="options">
          <span class="date">
            {{if attachments.length}}
              <img src="chrome://conversations/content/i/attachment.png" />
            {{/if}}
            ${date}
          </span>
          <span class="dropDown"> |
            <a href="javascript:" class="top-right-more">${str("more")} <span class="downwardArrow">&#x25bc;</span></a>
            <div class="tooltip">
              <ul>
                <li class="action-archive">${str("archive")}
                  <div class="arrow"></div>
                  <div class="arrow inside"></div>
                </li>
                <li class="action-delete">${str("delete")}</li>
                <li class="action-classic">${str("viewClassic")}</li>
                <li class="action-source">${str("viewSource")}</li>
              </ul>
            </div>
          </span>
        </div>
      </div>
      <div class="lightningImipBar notificationBar" style="display: none">
        <img class="lightningImipImage" src="chrome://calendar/skin/cal-icon32.png"/>
        <span class="lightningImipText"></span>
        <button class="lightningImipButton lightningImipButton1" style="display: none"/>
        <button class="lightningImipButton lightningImipButton2" style="display: none"/>
        <button class="lightningImipButton lightningImipButton3" style="display: none"/>
      </div>
      <div class="phishingBar notificationBar" style="display: none">
        <img src="chrome://messenger/skin/icons/phishing.png" style="vertical-align: middle;" />
        ${str("scam")}
        <span class="ignore-warning">
          <a href="javascript:">${str("ignoreWarning")}</a>
        </span>
      </div>
      <div class="remoteContent notificationBar" style="display: none">
        ${str("remoteContentBlocked")}
        <span class="show-remote-content">
          <a href="javascript:">${str("showRemote")}</a> -
        </span>
        <span class="always-display">
          <a href="javascript:">${str("alwaysShowRemote").replace("#1", realFrom)}</a>
        </span>
      </div>
      <div class="messageBody">
        <!-- Weird markup to deal with whitespace DOM nodes -->
        <ul class="tags special-tags"
          ><li
            class="keep-tag in-folder"
            title="${str('jumpToFolder')}"
            >${str("inFolder").replace("#1", folderName)}</li
          >{{if draft}}<li
            class="keep-tag edit-draft"
            >${str("editDraft")}</li
          >{{/if}}</ul
        >
        <ul class="tags regular-tags"></ul>
        <div class="iframe-container"></div>
        <div class="body-container"></div>
        {{if attachments.length}}
          <ul class="attachments">
            <div class="attachHeader">
              ${attachmentsPlural}
              | <a href="javascript:" class="link download-all">${str("downloadAll")}</a>
              {{if gallery}}
              | <a href="javascript:" onclick="galleryView('${uri}')" class="view-all">
                  ${str("galleryView")}
                </a>
              {{/if}}
            </div>
            {{each(i, att) attachments}}
            <li class="clearfix hbox attachment" draggable="true">
              <div class="attachmentThumb">
                <img onload="$(this).closest('.attachment').find('.align').vAlign()"
                class="${att.imgClass}" src="${att.thumb}" />
              </div>
              <div class="attachmentInfo align">
                <span class="filename">${att.name}</span>
                <div class="attachActions">
                  ${att.formattedSize}
                  | <a href="javascript:" class="link open-attachment">${str("open")}</a>
                  | <a href="javascript:" class="link download-attachment">${str("download")}</a>
                </div>
              </div>
            </li>
            {{/each}}
          </ul>
        {{/if}}
      </div>
      <div class="messageFooter">
        <div class="replyWrapper">
          <button class="replyMainAction">${str("reply")}</button>
          <button class="replyDropDown" onclick="displayMenu(event);">&#x25bc;</button>
          <div class="replyDropMenu">
            <div class="menuReply"><img src="i/reply.png" /> ${str("reply")}</div>
            <div class="menuReplyAll"><img src="i/replyAll.png" /> ${str("replyAll")}</div>
            <div class="menuReplyList"><img src="i/replyList.png" /> ${str("replyList")}</div>
          </div>
        </div>
        <button class="forward">${str("forward")}</button>
      </div>
      {{if quickReply}}
        {{tmpl "#quickReplyTemplate"}}
      {{/if}}
    </li>
    ]]>
  </script>
  <!-- Weird markup again, otherwise, the comma is separated from the name by a
    space because of the #text whitespace-only nodes that end up in the DOM.
  -->
  <script id="contactTemplate" type="text/x-jquery-tmpl"><![CDATA[<span
    >${separator}</span
    ><span class="tooltipWrapper contact"
      ><span class="contactName" style="${colorStyle}">${String.trim(name)}</span
      ><div class="tooltip">
        <div class="arrow"></div>
        <div class="arrow inside"></div>
        <div class="authorInfo">
          <span class="name">${tooltipName}</span>
          <span class="authorEmail">
            ${email}
            <button class="copyEmail" title="${str('copyEmail')}">
              <img src="chrome://conversations/content/i/clipboard.png" />
            </button>
          </span>
        </div>
        <div class="authorPicture">
          <img src="${avatar}" />
        </div>
        <div class="authorInfo authorLinks">
          {{if ("facebook" in profiles)}}
          <a href="http://www.facebook.com/profile.php?id=${profiles.facebook}" class="profile-link">
            <img src="chrome://conversations/content/i/facebook.ico" />
          </a>
          {{/if}}
          {{if ("twitter" in profiles)}}
          <a href="http://www.twitter.com/${profiles.twitter}" class="profile-link">
            <img src="chrome://conversations/content/i/twitter.ico" />
          </a>
          {{/if}}
          {{if ("google" in profiles)}}
          <a href="${profiles.google}" class="profile-link">
            <img src="chrome://conversations/content/i/google.ico" />
          </a>
          {{/if}}
          {{if ("flickr" in profiles)}}
          <a href="${profiles.flickr}" class="profile-link">
            <img src="chrome://conversations/content/i/flickr.ico" />
          </a>
          {{/if}}
        </div>
        <div class="tipFooter hiddenFooter" style="display:none;">
          {{if (showMonospace)}}
          <div style="margin-bottom:5px;">
            <input type="checkbox" style="vertical-align: text-top" class="checkbox-monospace" />
            <label style="color:#666; font-weight: normal">${str("messagesMonospace")}</label>
          </div>
          {{/if}}
          <button class="createFilter">${str("createFilter")}</button>
          <button class="addContact" title="${str('addToAb')}">
            <img src="chrome://conversations/content/i/user_add.png" />
          </button>
          <button class="editContact" title="${str('editCardAb')}">
            <img src="chrome://conversations/content/i/user_edit.png" />
          </button>
        </div>
        <div class="tipFooter">
          <button class="sendEmail">${str("sendEmail")}</button>
          <button class="showInvolving">${str("recentConversations")}</button>
          <button class="moreExpander">+</button>
        </div>
      </div
    ></span
  >]]></script>
  <script id="quickReplyTemplate" type="text/x-jquery-tmpl"><![CDATA[
    <div class="quickReply">
      <div class="quickReplyRecipients">
        <ul>
          <li class="showCc"><a onclick="showCc(); editFields();" href="javascript:">${str("addCc")}</a> |</li>
          <li class="showBcc"><a onclick="showBcc(); editFields();" href="javascript:">${str("addBcc")}</a></li>
        </ul>
        <ul>
          ${str("fieldFrom")}
          <li class="senderName"></li>
        </ul>
        <div class="editRecipientList editToList hbox">
          <div class="label">${str("fieldTo")}</div>
          <div class="boxFlex"><input type="text" id="to" /></div>
        </div>
        <div class="editRecipientList editCcList hbox" style="display: none">
          <div class="label">${str("fieldCc")}</div>
          <div class="boxFlex"><input type="text" id="cc" /></div>
        </div>
        <div class="editRecipientList editBccList hbox" style="display: none">
          <div class="label">${str("fieldBcc")}</div>
          <div class="boxFlex"><input type="text" id="bcc" /></div>
        </div>
        <ul class="recipientList toList">
          ${str("fieldTo")}
          <li>Roland Tanglao, </li>
          <li>David Ascher, </li>
          <li>Bryan Clark, </li>
          <li>James Burke</li>
          <li class="add-more">&#xa0;- <a href="javascript:" onclick="editFields('to');">${str("edit")}</a></li>
        </ul>
        <ul class="recipientList ccList" style="display: none;">
          ${str("fieldCc")}
          <li>Roland Tanglao, </li>
          <li>David Ascher, </li>
          <li>Bryan Clark, </li>
          <li>James Burke</li>
          <li class="add-more">&#xa0;- <a href="javascript:" onclick="editFields('cc');">${str("edit")}</a></li>
        </ul>
        <ul class="recipientList bccList" style="display: none;">
          ${str("fieldBcc")}
          <li>Roland Tanglao, </li>
          <li>David Ascher, </li>
          <li>Bryan Clark, </li>
          <li>James Burke</li>
          <li class="add-more">&#xa0;- <a href="javascript:" onclick="editFields('bcc');">${str("edit")}</a></li>
        </ul>
      </div>
      <div class="quickReplyHeader" style="display: none; overflow: auto">
        <span class="statusMessage" style="float: left;"></span>
        <span class="statusPercentage" style="float: right;"></span>
        <span class="statusThrobber" style="float: right;">
          <img src="chrome://conversations/content/i/loader.gif"
            style="vertical-align: middle;" />
        </span>
      </div>
      <textarea spellcheck="true" onclick="onTextareaClicked(event);"></textarea>
      <div class="quickReplyFooter" style="overflow: auto" tabindex="-1">
        <button id="send" style="float:right;margin-left:3px;" onclick="gComposeSession.send();">
          ${str("send")}
        </button>
        <button id="sendArchive" style="float:right;margin-left:3px;"
            onclick="gComposeSession.send({ archive: true });">
          ${str("sendArchive")}
        </button>
        <button id="save" style="float:right" onclick="onSave(event);">${str("save")}</button>
        <button id="discard" style="float: left;"
          onclick="confirmDiscard()">${str("discard")}</button>
        <button style="float: left; margin-left: 3px"
          onclick="onUseEditor();">${str("continueEditor")}</button>
      </div>
    </div>
    ]]>
  </script>
  <div id="wrapper">
    <div id="conversationHeaderWrapper">
      <div id="conversationHeader" class="hbox">
        <div class="subject boxFlex">&stub.loading;</div>
        <div class="actions">
          <button title="&stub.trash.tooltip;" onclick="deleteConversation(event);">
            <img src="i/trash.png" />
          </button>
          <button title="&stub.archive.tooltip;" onclick="archiveConversation(event);">
            <img src="i/archive.png" />
          </button>
          <button title="&stub.junk.tooltip;" class="junk-button" onclick="junkConversation(event);">
            <img src="i/junk.png" />
          </button>
          <button title="&stub.print.tooltip;" onclick="window.print();">
            <img src="i/print.png" />
          </button>
          <button title="&stub.expand.tooltip;" onclick="expandCollapse(event);">
            <span class="expand"></span>
          </button>
          <button title="&stub.read.tooltip;" onclick="toggleRead(event);">
            <span class="read"></span>
          </button>
          <button title="&stub.detach.tooltip2;" onclick="detachTab(event);">
            <img src="i/tab.png" />
          </button>
          <!--<button><span class="mode"></span></button>-->
        </div>
      </div>
    </div>
    <ul id="messageList">
    </ul>
  </div>
</body>
</html>
